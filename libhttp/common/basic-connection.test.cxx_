#include <libhttp/common/basic-connection.hxx>
#include <libunittest/libunittest.hxx>

//#include <libasio-mocks/immediate-executor.hxx>
//#include <libasio-mocks/stream.hxx>
//
//#include <libhttp/protocol/http-connection.hxx>

DEFINE_TEST("Instantiate")
{
  asio::io_context ioc;
  http::common::buffered_connection< asio::ip::tcp::socket > conn{ ioc };
}

// DEFINE_TEST("Localhost")
//{
//	asio::io_context io_context;
//	http::client::http_connection http_conn{ io_context };
//
//	asio::ip::tcp::endpoint endpoint(
//		asio::ip::address::from_string("127.0.0.1"), 80);
//	http_conn.get_stream().connect(endpoint);
//
//	http::protocol::request request{
//		"GET",
//		"/",
//		http::protocol::http_1_1
//	};
//	request.set_header("User-Agent", "noname/1.0");
//	request.set_header("Host", "127.0.0.1");
//
//	http::protocol::response response;
//	asio::streambuf read_buffer;
//	asio::streambuf response_content;
//
//	std::error_code ec;
//
//      http_conn.make_request(request,
//               asio::const_buffer{},
//                  read_buffer,
//                response,
//                   response_content, ec);
//
//	std::cout << ec << '\n';
//	std::cout << &response_content;
//}

#if 0
namespace {

  static char request[]{ "GET /index.html HTTP/1.1\r\n"
                         "Host: localhost\r\n"
                         "User-Agent: Sample/1.0\r\n"
                         "content-length: 5\r\n"
                         "\r\n"
                         "hello" };

  static char multi[]{ "GET /index.html HTTP/1.1\r\n"
                       "Host: localhost\r\n"
                       "User-Agent: Sample/1.0\r\n"
                       "Content-Length: 5\r\n"
                       "\r\n"
                       "hello"
                       "GET /index.html HTTP/1.1\r\n"
                       "Host: localhost\r\n"
                       "User-Agent: Sample/1.0\r\n"
                       "Content-Length: 5\r\n"
                       "\r\n"
                       "HELLO" };

} // namespace

DEFINE_TEST("read_request(r, content)")
{
  asio::mocks::stream backend{ asio::mocks::immediate_executor{},
                               asio::buffer(request),
                               10000 };
  http::protocol::basic_connection< decltype(backend) > conn{ std::move(
    backend) };

  http::protocol::request r;
  asio::streambuf content;

  TEST_DOES_NOT_THROW({ conn.read_request(r, content); });

  TEST_EQUAL(r.method(), "GET");
  TEST_EQUAL(r.target(), "/index.html");

  TEST_EQUAL(content.size(), 5);

  std::string content_str{ asio::buffers_begin(content.data()),
                           asio::buffers_end(content.data()) };

  TEST_EQUAL(content_str, "hello");
}

DEFINE_TEST("multiple")
{
  asio::mocks::stream backend{ asio::mocks::immediate_executor{},
                               asio::buffer(multi),
                               100 };
  http::protocol::basic_connection< decltype(backend) > conn{ std::move(
    backend) };

  http::protocol::request r1;
  asio::streambuf content1;

  http::protocol::request r2;
  asio::streambuf content2;

  TEST_DOES_NOT_THROW({
    conn.read_request(r1, content1);
    conn.read_request(r2, content2);
  });

  TEST_EQUAL(r1.method(), "GET");
  TEST_EQUAL(r1.target(), "/index.html");

  TEST_EQUAL(r2.method(), "GET");
  TEST_EQUAL(r2.target(), "/index.html");

  TEST_EQUAL(content1.size(), 5);
  TEST_EQUAL(content2.size(), 5);

  std::string content1_str{ asio::buffers_begin(content1.data()),
                            asio::buffers_end(content1.data()) };

  std::string content2_str{ asio::buffers_begin(content2.data()),
                            asio::buffers_end(content2.data()) };

  TEST_EQUAL(content1_str, "hello");
  TEST_EQUAL(content2_str, "HELLO");
}

DEFINE_TEST("async request")
{
  std::cout << "marker 21\n";
  asio::mocks::stream backend{ asio::mocks::immediate_executor{},
                               asio::buffer(request),
                               10 };
  http::protocol::basic_connection< decltype(backend) > conn{ std::move(
    backend) };

  http::protocol::request r;
  asio::streambuf content;

  auto handler = [&](std::error_code const& ec, std::size_t bytes_transferred) {
    TEST_EQUAL(ec, std::error_code{});
    TEST_EQUAL(r.method(), "GET");
    TEST_EQUAL(r.target(), "/index.html");
    TEST_EQUAL(r.headers().get_one("user-agent"), "Sample/1.0");
    TEST_EQUAL(r.headers().get_one("content-length"), "5");

    for (auto&& j : r.headers()) {
      std::cout << j.first << " = " << j.second << '\n';
    }

    content.commit(5);

    std::cout << content.size() << "\n";
    TEST_EQUAL(content.size(), 5);

    std::string content_str{ asio::buffers_begin(content.data()),
                             asio::buffers_end(content.data()) };

    TEST_EQUAL(content_str, "hello");
  };

  std::cout << "marker\n";
  conn.async_read_request(r, content, handler);
}
#endif
